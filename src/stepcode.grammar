@precedence {
  typeargs,
  typeMember,
  typePrefix,
  param,
  intersection @left,
  union @left,
  typeExtends @right,
  elif @right,
  else @right,
  member,
  readonly,
  newArgs,
  call,
  taggedTemplate,
  prefix,
  postfix,
  typeof,
  exp @left,
  times @left,
  plus @left,
  shift @left,
  loop,
  rel @left,
  equal @left,
  and @left,
  or @left,
  assign @right,
  comma @left,
  params @left,
  statement @cut,
  predicate
  left @left
  right @right
  cut @cut
}

@top Script { subrutines* ProgramDefinition subrutines* }

subrutines {
   Procedure | Function | PSeIntFunction
}

Procedure {
  subproceso ProcedureName { identifier } ParamList?
     Block
  finsubproceso
}

Function {
  funcion FunctionName { identifier } ParamList? ":" VariableType
    Block
  finfuncion
}

PSeIntFunction {
  funcion VariableName "←" FunctionName { identifier } ParamList?
    Block
  finfuncion
}

VariableParam {
  !param VariableName (como VariableType)? ParameterPass{(ByReference | ByValue)}?
}

ParamList {
  "(" commaSep<VariableParam>? ")"
}

ProgramDefinition[@isGroup=Program]{
  ProgramHeader { proceso ProgramName { identifier }}
    Block
  finproceso
}

Block {
  statements*
}

statements[@isGroup=Statement] {
  simpleStatement | compoundStatement
}

simpleStatement {
  DefineStatement {
    definir Variables { commaSep<VariableDefinition{VariableName}> } como VariableType semi
  } |
  WriteStatement {
    escribir commaSep<expression> semi
  } |
  ReadStatement {
    leer commaSep<VariableName> semi
  } |
  ExpressionStatement { expression semi } |
  DimensionStatment {
    dimension VariableName "[" expression "]" semi
  }
}

compoundStatement {
  IfStatement {
    si expression entonces
      Block
    (!else sino !elif(si expression entonces)? Block)*
    !elif finsi+
  } |
  SwitchStatement {
    segun expression hacer
      SwitchBody {
          caseItem
      }
    finsegun
  } |
  WhileStatement {
    mientras expression hacer
      Block
    finmientras
  } |
  ForStatement {
    para AssignmentExpression hasta expression Step{(WithStep expression)}? hacer
      Block
    finpara
  } |
  RepeatStatement {
    repetir
      Block
    (mientrasque | hastaque) expression
  }
}

mientrasque[@name=mientrasque] {
  "mientras que" | "Mientras que" | "Mientras Que"
}

hastaque[@name=hastaque] {
  "hasta que" | "Hasta que" | "Hasta Que"
}

WithStep {
  "Con paso" | "Con Paso" | "con paso"
}

ByReference {
  "Por referencia" | "por referencia" | "por Referencia" | "Por Referencia"
}

ByValue {
  "Por valor" | "por valor" | "por Valor" | "Por Valor"
}


caseItem {
  (CaseLabel { expression ":" } | DefaultLabel { otherwise ":"})
  CaseStatement { statements }*
  caseItem?
}

otherwise{
  "De otro modo" | "de otro modo"
}

expression[@isGroup=Expression] {
  Number | String |
  BinaryExpression | UnaryExpression |  VariableName |
  AssignmentExpression |
  ParenthesizedExpression | MemberExpression | CallExpression
  | Break { romper } | Continue { continuar } | Return { retornar expression } |
  BoolExpression
}

BoolExpression {
  true | false
}

CallExpression {
  expression !call ArgList
}

ArgList {
  "(" commaSep<expression>? ")"
}

MemberExpression {
  expression !member "[" expression "]"
}

LogicOr[@name=LogicOp] {
  @specialize<identifier, "O" | "o">
}

LogicAnd[@name=LogicOp] {
  @specialize<identifier, "Y" | "y">
}

LogicNOT[@name=LogicOp] {
  @specialize<identifier, "NO" | "no" | "nO" | "No">
}


BinaryExpression {
  expression !plus ArithOp<"+" | "-"> expression |
  expression !times (ArithOp<"*"|"/"> | div | mod) expression|
  expression !exp ArithOp<"**"|'^'> expression |
  expression !equal CompareOp<"=" | "≠"> expression |
  expression !rel (CompareOp<"<" | "≤" | ">" | "≥">) expression |
  expression !and LogicAnd expression |
  expression !or LogicOr expression
}

UnaryExpression {
  !prefix LogicNOT expression
}

AssignmentExpression {
  (VariableName | MemberExpression) !assign "←" expression
}

ParenthesizedExpression { "(" expression ")" }

VariableName {
  identifier
}

VariableType {
  entero | real | logico | cadena | caracter
}


@skip {} {
  String {
    '"' (stringContentDouble)* ('"' | "\n") |
    "'" (stringContentSingle)* ("'" | "\n")
  }
}

semi {
  ";"
}

@skip { spaces | newline | Comment }

commaSep<expr> { expr ("," expr)* ","? }
kw<term> { @specialize[@name={term}]<identifier, term> }

@external specialize {identifier} keywords from "./tokens" {
    proceso[@name=proceso], finproceso[@name=finproceso],
    definir[@name=definir], como[@name=como],
    escribir[@name=escribir], leer[@name=leer],
    si[@name=si], entonces[@name=entonces], finsi[@name=finsi], sino[@name=sino],
    segun[@name=segun], hacer[@name=hacer], finsegun[@name=finsegun],
    entero[@name=entero], real[@name=real], logico[@name=logico], cadena[@name=cadena], caracter[@name=caracter],
    mod[@name=ArithOp], div[@name=ArithOp],
    mientras[@name=mientras], finmientras[@name=finmientras],
    para[@name=para], finpara[@name=finpara], hasta[@name=hasta],
    repetir[@name=repetir], subproceso[@name=subproceso],
    finsubproceso[@name=finsubproceso],
    funcion[@name=funcion], finfuncion[@name=finfuncion],
    romper[@name=romper], continuar[@name=continuar],
    retornar[@name=retornar], true[@name=BooleanLiteral], false[@name=BooleanLiteral], dimension[@name=dimension]
}

@tokens {
  spaces { @whitespace+ }
  newline[@export] { $[\r\n\u2028\u2029] }
  Comment { ("//" | '#') ![\n]* }
  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }
  word { identifierChar (identifierChar | @digit)* }
  identifier { word }

  @precedence { spaces, newline, identifier }
  @precedence { spaces, newline, word }
  @precedence { CaseLabel, ExpressionStatement }

  Number {
    (@digit ("_" | @digit)* ("." ("_" | @digit)*)? | "." @digit ("_" | @digit)*)
      (("e" | "E") ("+" | "-")? ("_" | @digit)+)?
  }
  @precedence { Number "." }

  stringContentSingle { ![\\\n']+ }

  stringContentDouble { ![\\\n"]+ }

  ArithOp<expr> { expr }
  LogicOp<expr> { expr }
  CompareOp<expr> { expr }

  @precedence { Comment, ArithOp }
  @precedence { CompareOp, identifier}
  @precedence { "←", identifier }
  @precedence { "De otro modo", "de otro modo", identifier }
  @precedence { "Con paso","Con Paso","con paso", identifier}
  @precedence { "mientras que" , "Mientras que" , "Mientras Que", identifier}
  @precedence {
    "hasta que" , "Hasta que" , "Hasta Que", identifier
  }
  @precedence {
    "Por referencia", "por referencia", "por Referencia", "Por Referencia", identifier
  }
  @precedence {
    "Por valor", "por valor", "por Valor", "Por Valor", identifier
  }

  "(" ")" "[" "]" "{" "}" "←" ";" "," ":"
}

@external propSource stepcodeHighlight from "./highlight"