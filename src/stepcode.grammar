@precedence {
  typeargs,
  typeMember,
  typePrefix,
  intersection @left,
  union @left,
  typeExtends @right,
  else @right,
  member,
  readonly,
  newArgs,
  call,
  taggedTemplate,
  prefix,
  postfix,
  typeof,
  exp @left,
  times @left,
  plus @left,
  shift @left,
  loop,
  rel @left,
  equal @left,
  and @left,
  or @left,
  assign @right,
  comma @left,
  statement @cut,
  predicate
}

@top Script { ProgramDefinition }

ProgramDefinition[@isGroup=Program]{
  ProgramHeader { proceso ProgramName { identifier }}
    Block
  finproceso
}

Block {
  statements*
}

statements[@isGroup=Statement] {
  simpleStatement
}

simpleStatement {
  DefineStatement {
    definir Variables { commaSep<VariableDefinition{VariableName}> } como VariableType semi
  } |
  WriteStatement {
    escribir commaSep<String | VariableName> semi
  } |
  ReadStatement {
    leer commaSep<VariableName> semi
  } |
  ExpressionStatement { expression semi }
}

expression[@isGroup=Expression] {
  Number | String |
  BinaryExpression |
  VariableName |
  AssignmentExpression |
  ParenthesizedExpression
}

BinaryExpression {
  expression !plus ArithOp<"+" | "-"> expression |
  expression !times (ArithOp<"*"|"/"> | div | mod) expression|
  expression !exp ArithOp<"**"|'^'> expression |
  expression !equal CompareOp<"=" | "≠"> expression |
  expression !rel (CompareOp<"<" | "≤" | ">" | "≥">) expression |
  expression !and LogicOp<"Y"|"y"> expression |
  expression !or LogicOp<"O"|"o"> expression
}

AssignmentExpression {
  VariableName !assign "←" expression
}

ParenthesizedExpression { "(" expression ")" }

VariableName {
  identifier
}

VariableType {
  entero | real | logico | cadena | caracter
}


@skip {} {
  String {
    '"' (stringContentDouble)* ('"' | "\n") |
    "'" (stringContentSingle)* ("'" | "\n")
  }
}

semi {
  ";"
}

@skip { spaces | newline | Comment }

commaSep<expr> { expr ("," expr)* ","? }

@tokens {
  spaces { @whitespace+ }
  newline[@export] { $[\r\n\u2028\u2029] }
  Comment { ("//" | '#') ![\n]* }
  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }
  word { identifierChar (identifierChar | @digit)* }
  identifier { word }
  @precedence { spaces, newline, identifier }
  @precedence { spaces, newline, word }

  Number {
    (@digit ("_" | @digit)* ("." ("_" | @digit)*)? | "." @digit ("_" | @digit)*)
      (("e" | "E") ("+" | "-")? ("_" | @digit)+)?
  }
  @precedence { Number "." }

  stringContentSingle { ![\\\n']+ }

  stringContentDouble { ![\\\n"]+ }

  ArithOp<expr> { expr }
  LogicOp<expr> { expr }
  CompareOp<expr> { expr }

  @precedence { ArithOp, Comment }
  @precedence { LogicOp, identifier }
  @precedence { CompareOp, identifier}
  @precedence { "←", identifier }
}


@external specialize {identifier} keywords from "./tokens" {
    proceso[@name=proceso], finproceso[@name=finproceso],
    definir[@name=definir], como[@name=como],
    escribir[@name=escribir], leer[@name=leer],
    si[@name=si], entonces[@name=entonces], finsi[@name=finsi], sino[@name=sino],
    segun[@name=segun], hacer[@name=hacer], finsegun[@name=finsegun],
    entero[@name=entero], real[@name=real], logico[@name=logico], cadena[@name=cadena], caracter[@name=caracter],
    mod[@name=ArithOp], div[@name=ArithOp]
}
